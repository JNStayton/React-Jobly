{"version":3,"sources":["hooks/useLocalStorage.js","auth/UserContext.js","Navbar/Navbar.js","home/Home.js","common/SearchForm.js","api.js","companies/CompanyCard.js","common/LoadingSpinner.js","companies/CompanyList.js","jobs/JobCard.js","jobs/JobCardList.js","jobs/JobList.js","companies/CompanyDetail.js","common/Alert.js","auth/LoginForm.js","auth/SignupForm.js","profiles/ProfileForm.js","routes/PrivateRoute.js","routes/Routes.js","App.js","serviceWorker.js","index.js"],"names":["useLocalStorage","key","firstValue","arguments","length","undefined","initialValue","localStorage","getItem","_useState","useState","_useState2","Object","slicedToArray","item","setItem","useEffect","console","debug","removeItem","UserContext","React","createContext","Navbar","_ref","logout","currentUser","useContext","react_default","a","createElement","react_router_dom","to","onClick","Home","className","username","SearchForm","searchFor","searchTerm","setSearchTerm","onSubmit","e","preventDefault","trim","name","placeholder","value","onChange","target","JoblyApi","endpoint","data","method","url","process","headers","Authorization","concat","token","params","axios","error","_context","t0","response","message","Array","isArray","handle","this","request","res","company","companies","title","jobs","user","id","CompanyCard","description","logoUrl","LoadingSpinner","CompanyList","setCompanies","search","_x","_search","apply","asyncToGenerator","CompanyList_regeneratorRuntime","mark","_callee","wrap","prev","next","getCompanies","sent","stop","common_SearchForm","map","companies_CompanyCard","common_LoadingSpinner","JobCard","salary","equity","companyName","_useContext","hasAppliedToJob","applyToJob","applied","setApplied","_handleApply","JobCard_regeneratorRuntime","abrupt","disabled","digitsRev","salaryStr","toString","i","push","reverse","join","formatSalary","JobCardList","job","jobs_JobCard","JobList","setJobs","JobList_regeneratorRuntime","getJobs","jobs_JobCardList","CompanyDetail","useParams","setCompany","_getCompany","CompanyDetail_regeneratorRuntime","getCompany","t1","Alert","_ref$messages","messages","LoginForm","login","history","useHistory","password","formData","setFormData","_useState3","_useState4","formErrors","setFormErrors","_handleSubmit","LoginForm_regeneratorRuntime","success","errors","handleChange","_e$target","l","objectSpread","defineProperty","htmlFor","required","type","autoComplete","common_Alert","SignupForm","signup","firstName","lastName","email","SignupForm_regeneratorRuntime","ProfileForm","setCurrentUser","_useState5","_useState6","saveConfirmed","setSaveConfirmed","ProfileForm_regeneratorRuntime","profileData","updatedUser","saveProfile","f","PrivateRoute","exact","path","children","react_router","Routes","src_home_Home","auth_LoginForm","auth_SignupForm","routes_PrivateRoute","companies_CompanyList","companies_CompanyDetail","jobs_JobList","profiles_ProfileForm","TOKEN_STORAGE_ID","App","infoLoaded","setInfoLoaded","Set","applicationIds","setApplicationIds","_useLocalStorage","_useLocalStorage2","setToken","_signup","App_regeneratorRuntime","_callee2","signupData","_token","_context2","_login","_callee3","loginData","_token2","_context3","has","_getCurrentUser","_jwt$decode","_currentUser","jwt","decode","getCurrentUser","applications","auth_UserContext","Provider","toConsumableArray","src_Navbar_Navbar","routes_Routes","_x2","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c988d8c3.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\n// hook for keeping state data synced with localStorage.\n\n//  This creates `item` as state and look in localStorage for current value\n// (if not found, defaults to `firstValue`)\n\n//  When `item` changes, effect re-runs:\n//  - if new state is null, removes from localStorage\n//  - else, updates localStorage\n\n//  To the component, this just acts like state that is also synced to/from\n//  localStorage::\n\n//   const [myThing, setMyThing] = useLocalStorage(\"myThing\")\n\nfunction useLocalStorage(key, firstValue = null) {\n\tconst initialValue = localStorage.getItem(key) || firstValue;\n\n\tconst [ item, setItem ] = useState(initialValue);\n\n\tuseEffect(\n\t\tfunction setKeyInLocalStorage() {\n\t\t\tconsole.debug('hooks useLocalStorage useEffect', 'item=', item);\n\n\t\t\tif (item === null) {\n\t\t\t\tlocalStorage.removeItem(key);\n\t\t\t} else {\n\t\t\t\tlocalStorage.setItem(key, item);\n\t\t\t}\n\t\t},\n\t\t[ key, item ]\n\t);\n\n\treturn [ item, setItem ];\n}\n\nexport default useLocalStorage;\n","import React from 'react';\n\n//provide currentUser object and setter\n\nconst UserContext = React.createContext();\n\nexport default UserContext;\n","import React, { useContext } from 'react';\nimport { Link, NavLink } from 'react-router-dom';\nimport UserContext from '../auth/UserContext';\nimport './Navbar.css';\n\n//Navbar for app, displays on every page.\n//If user logged in: display links to main site pages and logout. If user not logged in, display links to login and signup.\n\nconst Navbar = ({ logout }) => {\n\tconst { currentUser } = useContext(UserContext);\n\n\tconst ifLoggedIn = () => {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/\">Jobly</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<NavLink to=\"/companies\">Companies</NavLink>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<NavLink to=\"/profile\">Profile</NavLink>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/\" onClick={logout}>\n\t\t\t\t\t\t\tLog Out\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t);\n\t};\n\n\tconst ifLoggedOut = () => {\n\t\treturn (\n\t\t\t<ul>\n\t\t\t\t<li>\n\t\t\t\t\t<Link to=\"/\">Jobly</Link>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<NavLink to=\"/login\">Login</NavLink>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<NavLink to=\"signup\">Sign Up</NavLink>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t);\n\t};\n\n\treturn <nav>{currentUser ? ifLoggedIn() : ifLoggedOut()}</nav>;\n};\n\nexport default Navbar;\n","import React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport UserContext from '../auth/UserContext';\nimport './Home.css';\n\nconst Home = () => {\n\tconst { currentUser } = useContext(UserContext);\n\n\treturn (\n\t\t<div className=\"home\">\n\t\t\t<h1>Jobly</h1>\n\t\t\t<p>Search and Apply For Jobs</p>\n\t\t\t{currentUser ? (\n\t\t\t\t<h2>Welcome back, {currentUser.username}.</h2>\n\t\t\t) : (\n\t\t\t\t<p>\n\t\t\t\t\t<Link to=\"/login\">Login</Link>\n\t\t\t\t\t<Link to=\"/signup\">Sign Up</Link>\n\t\t\t\t</p>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default Home;\n","import React, { useState } from 'react';\nimport '../auth/Form.css';\n\nconst SearchForm = ({ searchFor }) => {\n\tconst [ searchTerm, setSearchTerm ] = useState('');\n\n\t//filter results if there is a search term\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\t\t//prevent searching for blank spaces\n\t\tsearchFor(searchTerm.trim() || undefined);\n\t\tsetSearchTerm(searchTerm.trim());\n\t};\n\n\tconst handleChange = (e) => {\n\t\tsetSearchTerm(e.target.value);\n\t};\n\n\treturn (\n\t\t<div className=\"form-container\">\n\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t<input\n\t\t\t\t\tname=\"searchTerm\"\n\t\t\t\t\tplaceholder=\"Enter search term...\"\n\t\t\t\t\tvalue={searchTerm}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t/>\n\t\t\t\t<button>Search</button>\n\t\t\t</form>\n\t\t</div>\n\t);\n};\n\nexport default SearchForm;\n","import axios from 'axios';\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || 'http://localhost:3001';\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n\t// the token for interactive with the API will be stored here.\n\tstatic token;\n\n\tstatic async request(endpoint, data = {}, method = 'get') {\n\t\tconsole.debug('API Call:', endpoint, data, method);\n\n\t\t//there are multiple ways to pass an authorization token, this is how you pass it in the header.\n\t\t//this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n\t\tconst url = `${BASE_URL}/${endpoint}`;\n\t\tconst headers = { Authorization: `Bearer ${JoblyApi.token}` };\n\t\tconst params = method === 'get' ? data : {};\n\n\t\ttry {\n\t\t\treturn (await axios({ url, method, data, params, headers })).data;\n\t\t} catch (err) {\n\t\t\tconsole.error('API Error:', err.response);\n\t\t\tlet message = err.response.data.error.message;\n\t\t\tthrow Array.isArray(message) ? message : [ message ];\n\t\t}\n\t}\n\n\t// Individual API routes\n\n\t/** Get details on a company by handle. */\n\n\tstatic async getCompany(handle) {\n\t\tlet res = await this.request(`companies/${handle}`);\n\t\treturn res.company;\n\t}\n\n\t// Get companies filtered by name if defined\n\n\tstatic async getCompanies(name) {\n\t\tlet res = await this.request('companies', { name });\n\t\treturn res.companies;\n\t}\n\n\t//Get list of jobs by title if defined\n\n\tstatic async getJobs(title) {\n\t\tlet res = await this.request('jobs', { title });\n\t\treturn res.jobs;\n\t}\n\n\t//USER SPECIFIC ROUTES\n\n\t//Get currently logged in user, if there is one\n\tstatic async getCurrentUser(username) {\n\t\tlet res = await this.request(`users/${username}`);\n\t\treturn res.user;\n\t}\n\n\t//Sign up a new user\n\tstatic async signup(data) {\n\t\tlet res = await this.request('auth/register', data, 'post');\n\t\treturn res.token;\n\t}\n\n\t//Log in a registered user\n\tstatic async login(data) {\n\t\tlet res = await this.request('auth/token', data, 'post');\n\t\treturn res.token;\n\t}\n\n\t//Let a user apply to a listed job\n\tstatic async applyToJob(username, id) {\n\t\tawait this.request(`users/${username}/jobs/${id}`, {}, 'post');\n\t}\n\n\t//Save changes on user profile page\n\tstatic async saveUserProfile(username, data) {\n\t\tlet res = await this.request(`users/${username}`, data, 'patch');\n\t\treturn res.user;\n\t}\n}\n\n// for now, put token (\"testuser\" / \"password\" on class)\nJoblyApi.token =\n\t'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ' +\n\t'SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.' +\n\t'FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc';\n\nexport default JoblyApi;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Company.css';\n\n//show basic information about a company; rendered on CompanyList\n\nconst CompanyCard = ({ name, description, logoUrl, handle }) => {\n\treturn (\n\t\t<div className=\"company-card\">\n\t\t\t<Link to={`/companies/${handle}`}>\n\t\t\t\t<div>\n\t\t\t\t\t<h4>{name}</h4>\n\t\t\t\t\t<p>{description}</p>\n\t\t\t\t</div>\n\t\t\t</Link>\n\t\t</div>\n\t);\n};\n\nexport default CompanyCard;\n","import React from 'react';\nimport './LoadingSpinner.css';\n\n//Loading message while data fetched from API\n\nfunction LoadingSpinner() {\n\treturn <div className=\"LoadingSpinner\">Loading ...</div>;\n}\n\nexport default LoadingSpinner;\n","import React, { useState, useEffect } from 'react';\nimport SearchForm from '../common/SearchForm';\nimport JoblyApi from '../api';\nimport CompanyCard from './CompanyCard';\nimport LoadingSpinner from '../common/LoadingSpinner';\nimport './Company.css';\n\n//show a list of companies in the DB\n\n//loads the companies from the API on mount; reloads filtered companies when search form submitted\n\n//route: /companies\n\nconst CompanyList = () => {\n\tconst [ companies, setCompanies ] = useState(null);\n\n\tuseEffect(function getCompaniesOnMount() {\n\t\tsearch();\n\t}, []);\n\n\t//this runs when search form is submitted\n\tasync function search(name) {\n\t\tlet companies = await JoblyApi.getCompanies(name);\n\t\tsetCompanies(companies);\n\t}\n\n\tif (!companies) return <LoadingSpinner />;\n\n\treturn (\n\t\t<div>\n\t\t\t<SearchForm searchFor={search} />\n\t\t\t{companies.length ? (\n\t\t\t\t<div className=\"company-list\">\n\t\t\t\t\t{companies.map((company) => (\n\t\t\t\t\t\t<CompanyCard\n\t\t\t\t\t\t\tkey={company.handle}\n\t\t\t\t\t\t\thandle={company.handle}\n\t\t\t\t\t\t\tname={company.name}\n\t\t\t\t\t\t\tdescription={company.description}\n\t\t\t\t\t\t\tlogoUrl={company.logoUrl}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<p>Sorry, no results for that search term</p>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default CompanyList;\n","import React, { useContext, useState } from 'react';\nimport UserContext from '../auth/UserContext';\nimport './Job.css';\n\n//shows some information about a job.\n//rendered by JobCardList; received 'apply' func prop from parent, which is called on apply\n\nfunction JobCard({ id, title, salary, equity, companyName }) {\n\tconsole.debug('JobCard');\n\n\tconst { hasAppliedToJob, applyToJob } = useContext(UserContext);\n\tconst [ applied, setApplied ] = useState();\n\n\tReact.useEffect(\n\t\tfunction updateAppliedStatus() {\n\t\t\tsetApplied(hasAppliedToJob(id));\n\t\t},\n\t\t[ id, hasAppliedToJob ]\n\t);\n\n\t/** Apply for a job */\n\tasync function handleApply(e) {\n\t\tif (hasAppliedToJob(id)) return;\n\t\tapplyToJob(id);\n\t\tsetApplied(true);\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t{' '}\n\t\t\t{applied}\n\t\t\t<div className=\"job-card\">\n\t\t\t\t<h6>\n\t\t\t\t\tJob Title: {title}{' '}\n\t\t\t\t\t<button id=\"apply-btn\" onClick={handleApply} disabled={applied}>\n\t\t\t\t\t\t{applied ? 'Applied' : 'Apply'}\n\t\t\t\t\t</button>\n\t\t\t\t</h6>\n\t\t\t\t<p>{companyName}</p>\n\t\t\t\t<div>\n\t\t\t\t\t<small>Salary: {formatSalary(salary)}</small>\n\t\t\t\t</div>\n\t\t\t\t{equity !== undefined && (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<small>Equity: {equity}</small>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\n/** Render integer salary like '$1,250,343' */\n\nfunction formatSalary(salary) {\n\tif (!salary) {\n\t\treturn 'Unpaid';\n\t}\n\tconst digitsRev = [];\n\tconst salaryStr = salary.toString();\n\n\tfor (let i = salaryStr.length - 1; i >= 0; i--) {\n\t\tdigitsRev.push(salaryStr[i]);\n\t\tif (i > 0 && i % 3 === 0) digitsRev.push(',');\n\t}\n\n\treturn digitsRev.reverse().join('');\n}\n\nexport default JobCard;\n","import React from 'react';\nimport JobCard from './JobCard';\n\n//display list of job cards\n\n//used in JobList and CompanyDetail.\n\nconst JobCardList = ({ jobs, apply }) => {\n\treturn (\n\t\t<div>\n\t\t\t{jobs.map((job) => (\n\t\t\t\t<JobCard\n\t\t\t\t\tkey={job.id}\n\t\t\t\t\tid={job.id}\n\t\t\t\t\ttitle={job.title}\n\t\t\t\t\tsalary={job.salary}\n\t\t\t\t\tequity={job.equity}\n\t\t\t\t\tcompanyName={job.companyName}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport default JobCardList;\n","import React, { useState, useEffect } from 'react';\nimport Search from '../common/SearchForm';\nimport JoblyApi from '../api';\nimport JobCardList from './JobCardList';\nimport LoadingSpinner from '../common/LoadingSpinner';\n\n//renders page with the list of jobs\n//loads jobs from API, reloads filtered jobs with search term submitted\n\nconst JobList = () => {\n\tconst [ jobs, setJobs ] = useState(null);\n\n\tuseEffect(function getAllJobsOnMount() {\n\t\tsearch();\n\t}, []);\n\n\t//triggered by search form submit\n\tasync function search(title) {\n\t\tlet jobs = await JoblyApi.getJobs(title);\n\t\tsetJobs(jobs);\n\t}\n\n\tif (!jobs) return <LoadingSpinner />;\n\n\treturn (\n\t\t<div>\n\t\t\t<Search searchFor={search} />\n\t\t\t{jobs.length ? <JobCardList jobs={jobs} /> : <p>Sorry, no results for that search term</p>}\n\t\t</div>\n\t);\n};\n\nexport default JobList;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport JoblyApi from '../api';\nimport JobCardList from '../jobs/JobCardList';\nimport LoadingSpinner from '../common/LoadingSpinner';\n\n//detail page for a company; renders information and jobs for a given company\n\n// route: /companies/:handle\n\nconst CompanyDetail = () => {\n\tconst { handle } = useParams();\n\tconst [ company, setCompany ] = useState(null);\n\n\tuseEffect(\n\t\tfunction getCompanyAndJobsForUser() {\n\t\t\tasync function getCompany() {\n\t\t\t\tsetCompany(await JoblyApi.getCompany(handle));\n\t\t\t}\n\t\t\tgetCompany();\n\t\t},\n\t\t[ handle ]\n\t);\n\n\tif (!company) return <LoadingSpinner />;\n\n\treturn (\n\t\t<div className=\"company-detail\">\n\t\t\t<h3>{company.name}</h3>\n\t\t\t<p>{company.description}</p>\n\t\t\t<JobCardList jobs={company.jobs} />\n\t\t</div>\n\t);\n};\n\nexport default CompanyDetail;\n","import React from 'react';\n\n//component for alerts, particularly error messages during form submission\n\nconst Alert = ({ messages = [] }) => {\n\treturn <div>{messages.map((error) => <p key={error}>{error}</p>)}</div>;\n};\n\nexport default Alert;\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport './Form.css';\nimport Alert from '../common/Alert';\n\n//form for logging in\n//updates state on change; when submitted, calls the login function and redirects to /companies\n\nconst LoginForm = ({ login }) => {\n\tconst history = useHistory();\n\tconst [ formData, setFormData ] = useState({\n\t\tusername: '',\n\t\tpassword: ''\n\t});\n\tconst [ formErrors, setFormErrors ] = useState([]);\n\n\t//form submit\n\tasync function handleSubmit(e) {\n\t\te.preventDefault();\n\t\tlet res = await login(formData);\n\t\tif (res.success) {\n\t\t\thistory.push('./companies');\n\t\t} else {\n\t\t\tsetFormErrors(res.errors);\n\t\t}\n\t}\n\n\t//handling form changes\n\tconst handleChange = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tsetFormData((l) => ({ ...l, [name]: value }));\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"form-container\">\n\t\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t\t<h2 className=\"title\">Log In</h2>\n\t\t\t\t\t<label htmlFor=\"username\">Username</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\tname=\"username\"\n\t\t\t\t\t\tvalue={formData.username}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\tplaceholder=\"Username\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t\t<label htmlFor=\"password\">Password</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\tvalue={formData.password}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\tautoComplete=\"current-password\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t\t{formErrors.length ? <Alert messages={formErrors} /> : null}\n\t\t\t\t\t<button>Submit Changes</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Alert from '../common/Alert';\nimport './Form.css';\n\n//Signup form\n//Manages updates to state on change; on submit, calls signp and redirects to /companies\n\nconst SignupForm = ({ signup }) => {\n\tconst history = useHistory();\n\tconst [ formData, setFormData ] = useState({\n\t\tusername: '',\n\t\tpassword: '',\n\t\tfirstName: '',\n\t\tlastName: '',\n\t\temail: ''\n\t});\n\tconst [ formErrors, setFormErrors ] = useState([]);\n\n\t//handle form submit\n\tasync function handleSubmit(e) {\n\t\te.preventDefault();\n\t\tlet res = await signup(formData);\n\t\tif (res.success) {\n\t\t\thistory.push('/companies');\n\t\t} else {\n\t\t\tsetFormErrors(res.errors);\n\t\t}\n\t}\n\n\t//handle change\n\tconst handleChange = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tsetFormData((data) => ({ ...data, [name]: value }));\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"form-container\">\n\t\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t\t<h2>Sign Up</h2>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<label htmlFor=\"username\">Username</label>\n\t\t\t\t\t\t<input name=\"username\" value={formData.username} onChange={handleChange} />\n\t\t\t\t\t\t<label htmlFor=\"password\">Password</label>\n\t\t\t\t\t\t<input type=\"password\" name=\"password\" value={formData.password} onChange={handleChange} />\n\t\t\t\t\t\t<label htmlFor=\"firstName\">First name</label>\n\t\t\t\t\t\t<input name=\"firstName\" value={formData.firstName} onChange={handleChange} />\n\t\t\t\t\t\t<label htmlFor=\"lastName\">Last name</label>\n\t\t\t\t\t\t<input name=\"lastName\" value={formData.lastName} onChange={handleChange} />\n\t\t\t\t\t\t<label>Email</label>\n\t\t\t\t\t\t<input type=\"email\" name=\"email\" value={formData.email} onChange={handleChange} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>{formErrors.length ? <Alert messages={formErrors} /> : null}</div>\n\t\t\t\t\t<button>Sign Up</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default SignupForm;\n","import React, { useState, useContext } from 'react';\nimport Alert from '../common/Alert';\nimport JoblyApi from '../api';\nimport UserContext from '../auth/UserContext';\n\n//form to edit a user profile\n//displays the profile form and handles changes to state; form submit posts to the API to save and triggers a reload.\n//an Alert pops up to display a message on successful save\n\nconst ProfileForm = () => {\n\tconst { currentUser, setCurrentUser } = useContext(UserContext);\n\tconst [ formData, setFormData ] = useState({\n\t\tfirstName: currentUser.firstName,\n\t\tlastName: currentUser.lastName,\n\t\temail: currentUser.email,\n\t\tusername: currentUser.username,\n\t\tpassword: ''\n\t});\n\tconst [ formErrors, setFormErrors ] = useState([]);\n\tconst [ saveConfirmed, setSaveConfirmed ] = useState(false);\n\n\t//handle form submission\n\tasync function handleSubmit(e) {\n\t\te.preventDefault();\n\t\tlet profileData = {\n\t\t\tfirstName: formData.firstName,\n\t\t\tlastName: formData.lastName,\n\t\t\temail: formData.email,\n\t\t\tpassword: formData.password\n\t\t};\n\n\t\tlet username = formData.username;\n\t\tlet updatedUser;\n\n\t\ttry {\n\t\t\tupdatedUser = await JoblyApi.saveProfile(username, profileData);\n\t\t} catch (err) {\n\t\t\tsetFormErrors(err);\n\t\t\treturn;\n\t\t}\n\n\t\tsetFormData((f) => ({ ...f, password: '' }));\n\t\tsetFormErrors([]);\n\t\tsetSaveConfirmed(true);\n\n\t\t//trigger reload of user info\n\t\tsetCurrentUser(updatedUser);\n\t}\n\n\tconst handleChange = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tsetFormData((f) => ({\n\t\t\t...f,\n\t\t\t[name]: value\n\t\t}));\n\t\tsetFormErrors([]);\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"form-container\">\n\t\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t\t<h2>Profile</h2>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<label>Username</label>\n\t\t\t\t\t\t<p className=\"username\">{formData.username}</p>\n\t\t\t\t\t\t<label htmlFor=\"firstName\">First Name</label>\n\t\t\t\t\t\t<input type=\"text\" name=\"firstName\" value={formData.firstName} onChange={handleChange} />\n\t\t\t\t\t\t<label htmlFor=\"lastName\">Last Name</label>\n\t\t\t\t\t\t<input type=\"text\" name=\"LastName\" value={formData.lastName} onChange={handleChange} />\n\t\t\t\t\t\t<label htmlFor=\"email\">Email</label>\n\t\t\t\t\t\t<input type=\"text\" name=\"email\" value={formData.email} onChange={handleChange} />\n\t\t\t\t\t\t<label htmlFor=\"password\">Confirm password to save changes:</label>\n\t\t\t\t\t\t<input type=\"password\" name=\"password\" value={formData.password} onChange={handleChange} />\n\t\t\t\t\t</div>\n\t\t\t\t\t{formErrors.length ? <Alert messages={formErrors} /> : null}\n\n\t\t\t\t\t{saveConfirmed ? <Alert messages={[ 'Updated successfully.' ]} /> : null}\n\n\t\t\t\t\t<button>Save Changes</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default ProfileForm;\n","import React, { useContext } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport UserContext from '../auth/UserContext';\n\n//Component for private routes.\n//Component checks for valid current user and continues to routes if so. Otherwise, redirects to login.\n\nconst PrivateRoute = ({ exact, path, children }) => {\n\tconst { currentUser } = useContext(UserContext);\n\n\tif (!currentUser) {\n\t\treturn <Redirect to=\"login\" />;\n\t}\n\n\treturn (\n\t\t<Route exact={exact} path={path}>\n\t\t\t{children}\n\t\t</Route>\n\t);\n};\n\nexport default PrivateRoute;\n","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport Home from '../home/Home';\nimport CompanyList from '../companies/CompanyList';\nimport JobList from '../jobs/JobList';\nimport CompanyDetail from '../companies/CompanyDetail';\nimport LoginForm from '../auth/LoginForm';\nimport SignupForm from '../auth/SignupForm';\nimport ProfileForm from '../profiles/ProfileForm';\nimport PrivateRoute from './PrivateRoute';\n\n//Routes for the app\n//Private routes are only visible to logged-in users (PrivateRoute is an authorization component)\n//Non-existant routes redirect to Home\n\nconst Routes = ({ login, signup }) => {\n\treturn (\n\t\t<div>\n\t\t\t<Switch>\n\t\t\t\t{/* Homepage */}\n\t\t\t\t<Route exact path=\"/\">\n\t\t\t\t\t<Home />\n\t\t\t\t</Route>\n\t\t\t\t{/* Login Page */}\n\t\t\t\t<Route exact path=\"/login\">\n\t\t\t\t\t<LoginForm login={login} />\n\t\t\t\t</Route>\n\t\t\t\t{/* Signup Form */}\n\t\t\t\t<Route exact path=\"/signup\">\n\t\t\t\t\t<SignupForm signup={signup} />\n\t\t\t\t</Route>\n\t\t\t\t{/* Private Routes accessible only to logged-in users */}\n\t\t\t\t{/* Companies Page */}\n\t\t\t\t<PrivateRoute exact path=\"/companies\">\n\t\t\t\t\t<CompanyList />\n\t\t\t\t</PrivateRoute>\n\t\t\t\t{/* Company Detail Page */}\n\t\t\t\t<PrivateRoute exact path=\"/companies/:handle\">\n\t\t\t\t\t<CompanyDetail />\n\t\t\t\t</PrivateRoute>\n\t\t\t\t{/* Jobs Page */}\n\t\t\t\t<PrivateRoute exact path=\"/jobs\">\n\t\t\t\t\t<JobList />\n\t\t\t\t</PrivateRoute>\n\t\t\t\t{/* User Profile Page */}\n\t\t\t\t<PrivateRoute exact path=\"/profile\">\n\t\t\t\t\t<ProfileForm />\n\t\t\t\t</PrivateRoute>\n\t\t\t\t{/* All other routes redirect to Home */}\n\t\t\t\t<Redirect to=\"/\" />\n\t\t\t</Switch>\n\t\t</div>\n\t);\n};\n\nexport default Routes;\n","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport useLocalStorage from './hooks/useLocalStorage';\nimport Navbar from './Navbar/Navbar';\nimport Routes from './routes/Routes';\nimport LoadingSpinner from './common/LoadingSpinner';\nimport JoblyApi from './api';\nimport UserContext from './auth/UserContext';\nimport jwt from 'jsonwebtoken';\n\n// Key name for storing token in localStorage for \"remember me\" re-login\nexport const TOKEN_STORAGE_ID = 'jobly-token';\n\n/** Jobly application.\n *\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n *\n * - currentUser: user obj from API. This becomes the canonical way to tell\n *   if someone is logged in. This is passed around via context throughout app.\n *\n * - token: for logged in users, this is their authentication JWT.\n *   Is required to be set for most API calls. This is initially read from\n *   localStorage and synced to there via the useLocalStorage hook.\n *\n * App -> Routes\n */\n\nfunction App() {\n\tconst [ infoLoaded, setInfoLoaded ] = useState(false);\n\tconst [ applicationIds, setApplicationIds ] = useState(new Set([]));\n\tconst [ currentUser, setCurrentUser ] = useState(null);\n\tconst [ token, setToken ] = useLocalStorage(TOKEN_STORAGE_ID);\n\n\tconsole.debug('App', 'infoLoaded=', infoLoaded, 'currentUser=', currentUser, 'token=', token);\n\n\t// Load user info from API. Until a user is logged in and they have a token,\n\t// this should not run. It only needs to re-run when a user logs out, so\n\t// the value of the token is a dependency for this effect.\n\n\tuseEffect(\n\t\tfunction loadUserInfo() {\n\t\t\tasync function getCurrentUser() {\n\t\t\t\tif (token) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlet { username } = jwt.decode(token);\n\t\t\t\t\t\t// put the token on the Api class so it can use it to call the API.\n\t\t\t\t\t\tJoblyApi.token = token;\n\t\t\t\t\t\tlet currentUser = await JoblyApi.getCurrentUser(username);\n\t\t\t\t\t\tsetCurrentUser(currentUser);\n\t\t\t\t\t\tsetApplicationIds(new Set(currentUser.applications));\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tconsole.error('App loadUserInfo: problem loading', err);\n\t\t\t\t\t\tsetCurrentUser(null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsetInfoLoaded(true);\n\t\t\t}\n\n\t\t\t// set infoLoaded to false while async getCurrentUser runs; once the\n\t\t\t// data is fetched (or even if an error happens!), this will be set back\n\t\t\t// to false to control the spinner.\n\t\t\tsetInfoLoaded(false);\n\t\t\tgetCurrentUser();\n\t\t},\n\t\t[ token ]\n\t);\n\n\t/** Handles site-wide logout. */\n\tfunction logout() {\n\t\tsetCurrentUser(null);\n\t\tsetToken(null);\n\t}\n\n\t/** Handles site-wide signup.\n   *\n   * Automatically logs them in (set token) upon signup.\n   *\n   * Make sure you await this function and check its return value!\n   */\n\tasync function signup(signupData) {\n\t\ttry {\n\t\t\tlet token = await JoblyApi.signup(signupData);\n\t\t\tsetToken(token);\n\t\t\treturn { success: true };\n\t\t} catch (errors) {\n\t\t\tconsole.error('signup failed', errors);\n\t\t\treturn { success: false, errors };\n\t\t}\n\t}\n\n\t/** Handles site-wide login.\n   *\n   * Make sure you await this function and check its return value!\n   */\n\tasync function login(loginData) {\n\t\ttry {\n\t\t\tlet token = await JoblyApi.login(loginData);\n\t\t\tsetToken(token);\n\t\t\treturn { success: true };\n\t\t} catch (errors) {\n\t\t\tconsole.error('login failed', errors);\n\t\t\treturn { success: false, errors };\n\t\t}\n\t}\n\n\t/** Checks if a job has been applied for. */\n\tfunction hasAppliedToJob(id) {\n\t\treturn applicationIds.has(id);\n\t}\n\n\t/** Apply to a job: make API call and update set of application IDs. */\n\tfunction applyToJob(id) {\n\t\tif (hasAppliedToJob(id)) return;\n\t\tJoblyApi.applyToJob(currentUser.username, id);\n\t\tsetApplicationIds(new Set([ ...applicationIds, id ]));\n\t}\n\n\tif (!infoLoaded) return <LoadingSpinner />;\n\n\treturn (\n\t\t<BrowserRouter>\n\t\t\t<UserContext.Provider value={{ currentUser, setCurrentUser, hasAppliedToJob, applyToJob }}>\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<Navbar logout={logout} />\n\t\t\t\t\t<Routes login={login} signup={signup} />\n\t\t\t\t</div>\n\t\t\t</UserContext.Provider>\n\t\t</BrowserRouter>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}